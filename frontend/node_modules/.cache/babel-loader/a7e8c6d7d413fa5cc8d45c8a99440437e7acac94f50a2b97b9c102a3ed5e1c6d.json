{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n\n// function Interval() {\n//   const [intervalData, setIntervalData] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [isTableVisible, setIsTableVisible] = useState(false);\n//   const baseUrl = process.env.REACT_APP_URL; // Ensure your environment variable is set\n\n//   useEffect(() => {\n//     if (isTableVisible && intervalData.length === 0) {\n//       // Fetch data only when table is visible and data is not already loaded\n//       fetchData();\n//     }\n//   }, [isTableVisible]);\n\n//   const fetchData = async () => {\n//     setIsLoading(true);\n//     setError(null);\n//     try {\n//       const response = await fetch(`${baseUrl}/get-interval`);\n//       if (!response.ok) {\n//         throw new Error(\"Network response was not ok\");\n//       }\n//       const data = await response.json();\n//       setIntervalData(data);\n//     } catch (error) {\n//       setError(\"Failed to fetch data: \" + error.message);\n//     } finally {\n//       setIsLoading(false);\n//     }\n//   };\n\n//   const toggleTableVisibility = () => {\n//     setIsTableVisible(!isTableVisible);\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"row\">\n//         <div className=\"col-6\">\n//           <button\n//             className=\"btn btn-primary w-100 mb-3\"\n//             onClick={toggleTableVisibility}\n//             disabled={isLoading}\n//           >\n//             {isLoading\n//               ? \"Loading...\"\n//               : isTableVisible\n//               ? \"Hide Interval Data\"\n//               : \"Show Interval Data\"}\n//           </button>\n//         </div>\n//         <div className=\"col-6\">\n//           <button className=\"btn btn-danger w-100\">\n//             ALL Interval Download\n//           </button>\n//         </div>\n//       </div>\n\n//       {error && <div style={{ color: \"red\" }}>{error}</div>}\n//       {isTableVisible && intervalData.length > 0 && (\n//         <table className=\"table table-striped\">\n//           <thead>\n//             <tr>\n//               <th>#</th>\n//               <th>PC Name</th>\n//               <th>Start Time</th>\n//               <th>Last Time</th>\n//               <th>Total Time (s)</th>\n//               <th>School Name</th>\n//               <th>Lab Number</th>\n//               <th>PC Number</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {intervalData.map((item, index) => (\n//               <tr key={item._id}>\n//                 <td>{index + 1}</td>\n//                 <td>{item.pcname}</td>\n//                 <td>{item.starttime}</td>\n//                 <td>{item.lasttime}</td>\n//                 <td>{item.totaltime}</td>\n//                 <td>{item.schoolname}</td>\n//                 <td>{item.labnum}</td>\n//                 <td>{item.pcnum}</td>\n//               </tr>\n//             ))}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default Interval;","map":{"version":3,"names":[],"sources":["D:/MONGODB-online/frontend/src/interval.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n\r\n// function Interval() {\r\n//   const [intervalData, setIntervalData] = useState([]);\r\n//   const [isLoading, setIsLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n//   const [isTableVisible, setIsTableVisible] = useState(false);\r\n//   const baseUrl = process.env.REACT_APP_URL; // Ensure your environment variable is set\r\n\r\n//   useEffect(() => {\r\n//     if (isTableVisible && intervalData.length === 0) {\r\n//       // Fetch data only when table is visible and data is not already loaded\r\n//       fetchData();\r\n//     }\r\n//   }, [isTableVisible]);\r\n\r\n//   const fetchData = async () => {\r\n//     setIsLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const response = await fetch(`${baseUrl}/get-interval`);\r\n//       if (!response.ok) {\r\n//         throw new Error(\"Network response was not ok\");\r\n//       }\r\n//       const data = await response.json();\r\n//       setIntervalData(data);\r\n//     } catch (error) {\r\n//       setError(\"Failed to fetch data: \" + error.message);\r\n//     } finally {\r\n//       setIsLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   const toggleTableVisibility = () => {\r\n//     setIsTableVisible(!isTableVisible);\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"row\">\r\n//         <div className=\"col-6\">\r\n//           <button\r\n//             className=\"btn btn-primary w-100 mb-3\"\r\n//             onClick={toggleTableVisibility}\r\n//             disabled={isLoading}\r\n//           >\r\n//             {isLoading\r\n//               ? \"Loading...\"\r\n//               : isTableVisible\r\n//               ? \"Hide Interval Data\"\r\n//               : \"Show Interval Data\"}\r\n//           </button>\r\n//         </div>\r\n//         <div className=\"col-6\">\r\n//           <button className=\"btn btn-danger w-100\">\r\n//             ALL Interval Download\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {error && <div style={{ color: \"red\" }}>{error}</div>}\r\n//       {isTableVisible && intervalData.length > 0 && (\r\n//         <table className=\"table table-striped\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>#</th>\r\n//               <th>PC Name</th>\r\n//               <th>Start Time</th>\r\n//               <th>Last Time</th>\r\n//               <th>Total Time (s)</th>\r\n//               <th>School Name</th>\r\n//               <th>Lab Number</th>\r\n//               <th>PC Number</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {intervalData.map((item, index) => (\r\n//               <tr key={item._id}>\r\n//                 <td>{index + 1}</td>\r\n//                 <td>{item.pcname}</td>\r\n//                 <td>{item.starttime}</td>\r\n//                 <td>{item.lasttime}</td>\r\n//                 <td>{item.totaltime}</td>\r\n//                 <td>{item.schoolname}</td>\r\n//                 <td>{item.labnum}</td>\r\n//                 <td>{item.pcnum}</td>\r\n//               </tr>\r\n//             ))}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Interval;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}