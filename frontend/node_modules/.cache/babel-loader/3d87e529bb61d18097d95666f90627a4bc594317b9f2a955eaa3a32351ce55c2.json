{"ast":null,"code":"var _jsxFileName = \"D:\\\\MONGODB-online\\\\frontend\\\\src\\\\schoolwisepc.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SchoolwisePC() {\n  _s();\n  const [schoolData, setSchoolData] = useState([]);\n  const [selectedSchool, setSelectedSchool] = useState(null);\n\n  // Fetching data from the API\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await axios.get('http://localhost:4300/get-pc');\n        setSchoolData(response.data);\n      } catch (error) {\n        console.error('Error fetching data: ', error);\n      }\n    };\n    fetchData();\n  }, []);\n\n  // Function to handle school selection\n  const handleSelectSchool = schoolName => {\n    const filteredData = schoolData.filter(data => data.schoolname === schoolName);\n    setSelectedSchool(filteredData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"School PC Usage Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: Array.from(new Set(schoolData.map(item => item.schoolname))).map(school => /*#__PURE__*/_jsxDEV(\"li\", {\n        onClick: () => handleSelectSchool(school),\n        children: school\n      }, school, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), selectedSchool && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Selected School: \", selectedSchool.length > 0 ? selectedSchool[0].schoolname : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }, this), selectedSchool.map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"PC Name: \", item.pcname]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Time Used: \", item.totaltime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Last Used: \", item.lasttime]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 29\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n_s(SchoolwisePC, \"AY//KsmwvV2lIewhH2yvBVHy/JU=\");\n_c = SchoolwisePC;\nexport default SchoolwisePC;\nvar _c;\n$RefreshReg$(_c, \"SchoolwisePC\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","SchoolwisePC","_s","schoolData","setSchoolData","selectedSchool","setSelectedSchool","fetchData","response","get","data","error","console","handleSelectSchool","schoolName","filteredData","filter","schoolname","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","from","Set","map","item","school","onClick","length","index","pcname","totaltime","lasttime","_c","$RefreshReg$"],"sources":["D:/MONGODB-online/frontend/src/schoolwisepc.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction SchoolwisePC() {\r\n    const [schoolData, setSchoolData] = useState([]);\r\n    const [selectedSchool, setSelectedSchool] = useState(null);\r\n\r\n    // Fetching data from the API\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:4300/get-pc');\r\n                setSchoolData(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching data: ', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    // Function to handle school selection\r\n    const handleSelectSchool = (schoolName) => {\r\n        const filteredData = schoolData.filter(data => data.schoolname === schoolName);\r\n        setSelectedSchool(filteredData);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>School PC Usage Data</h1>\r\n            <ul>\r\n                {Array.from(new Set(schoolData.map(item => item.schoolname))).map(school => (\r\n                    <li key={school} onClick={() => handleSelectSchool(school)}>\r\n                        {school}\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n            {selectedSchool && (\r\n                <div>\r\n                    <h2>Selected School: {selectedSchool.length > 0 ? selectedSchool[0].schoolname : ''}</h2>\r\n                    {selectedSchool.map((item, index) => (\r\n                        <div key={index}>\r\n                            <p>PC Name: {item.pcname}</p>\r\n                            <p>Total Time Used: {item.totaltime}</p>\r\n                            <p>Last Used: {item.lasttime}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SchoolwisePC;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}