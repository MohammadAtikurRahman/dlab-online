{"ast":null,"code":"var _jsxFileName = \"D:\\\\MONGODB-online\\\\frontend\\\\src\\\\uploadpc.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPC() {\n  _s();\n  const [parsedData, setParsedData] = useState([]);\n  const handleFileChange = e => {\n    const file = e.target.files[0]; // Get the first file only for simplicity\n    if (file) {\n      Papa.parse(file, {\n        header: true,\n        // Consider the first row of the CSV as headers\n        skipEmptyLines: true,\n        complete: function (results) {\n          setParsedData(results.data); // Set the parsed data to state\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-group\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".csv\",\n        className: \"form-control\",\n        id: \"inputGroupFile04\",\n        \"aria-describedby\": \"inputGroupFileAddon04\",\n        \"aria-label\": \"Upload\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }, this), parsedData.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Parsed CSV Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: JSON.stringify(parsedData, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadPC, \"Mu0IZV9ZRt/+4IZt0I5LDXjGIho=\");\n_c = UploadPC;\nexport default UploadPC;\nvar _c;\n$RefreshReg$(_c, \"UploadPC\");","map":{"version":3,"names":["React","useState","Papa","jsxDEV","_jsxDEV","UploadPC","_s","parsedData","setParsedData","handleFileChange","e","file","target","files","parse","header","skipEmptyLines","complete","results","data","children","className","type","accept","id","onChange","fileName","_jsxFileName","lineNumber","columnNumber","length","JSON","stringify","_c","$RefreshReg$"],"sources":["D:/MONGODB-online/frontend/src/uploadpc.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport Papa from 'papaparse';\r\n\r\nfunction UploadPC() {\r\n    const [parsedData, setParsedData] = useState([]);\r\n\r\n    const handleFileChange = (e) => {\r\n        const file = e.target.files[0]; // Get the first file only for simplicity\r\n        if (file) {\r\n            Papa.parse(file, {\r\n                header: true, // Consider the first row of the CSV as headers\r\n                skipEmptyLines: true,\r\n                complete: function(results) {\r\n                    setParsedData(results.data); // Set the parsed data to state\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"input-group\">\r\n                <input\r\n                    type=\"file\"\r\n                    accept=\".csv\"\r\n                    className=\"form-control\"\r\n                    id=\"inputGroupFile04\"\r\n                    aria-describedby=\"inputGroupFileAddon04\"\r\n                    aria-label=\"Upload\"\r\n                    onChange={handleFileChange}\r\n                />\r\n            </div>\r\n\r\n            {parsedData.length > 0 && (\r\n                <div>\r\n                    <h2>Parsed CSV Data</h2>\r\n                    <pre>{JSON.stringify(parsedData, null, 2)}</pre>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadPC;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEhD,MAAMQ,gBAAgB,GAAIC,CAAC,IAAK;IAC5B,MAAMC,IAAI,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAChC,IAAIF,IAAI,EAAE;MACNT,IAAI,CAACY,KAAK,CAACH,IAAI,EAAE;QACbI,MAAM,EAAE,IAAI;QAAE;QACdC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAE,SAAAA,CAASC,OAAO,EAAE;UACxBV,aAAa,CAACU,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC;QACjC;MACJ,CAAC,CAAC;IACN;EACJ,CAAC;EAED,oBACIf,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAKiB,SAAS,EAAC,aAAa;MAAAD,QAAA,eACxBhB,OAAA;QACIkB,IAAI,EAAC,MAAM;QACXC,MAAM,EAAC,MAAM;QACbF,SAAS,EAAC,cAAc;QACxBG,EAAE,EAAC,kBAAkB;QACrB,oBAAiB,uBAAuB;QACxC,cAAW,QAAQ;QACnBC,QAAQ,EAAEhB;MAAiB;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,EAELtB,UAAU,CAACuB,MAAM,GAAG,CAAC,iBAClB1B,OAAA;MAAAgB,QAAA,gBACIhB,OAAA;QAAAgB,QAAA,EAAI;MAAe;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxBzB,OAAA;QAAAgB,QAAA,EAAMW,IAAI,CAACC,SAAS,CAACzB,UAAU,EAAE,IAAI,EAAE,CAAC;MAAC;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd;AAACvB,EAAA,CAtCQD,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AAwCjB,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}