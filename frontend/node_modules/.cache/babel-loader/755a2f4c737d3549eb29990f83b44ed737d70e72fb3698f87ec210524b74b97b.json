{"ast":null,"code":"var _jsxFileName = \"D:\\\\MONGODB-online\\\\frontend\\\\src\\\\uploadpc.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadPC() {\n  _s();\n  const [selectedFiles, setSelectedFiles] = useState([]);\n  const handleFileChange = e => {\n    setSelectedFiles(e.target.files);\n  };\n  const handleUpload = async () => {\n    if (selectedFiles.length === 0) {\n      alert(\"Please select one or more CSV files to upload.\");\n      return;\n    }\n    const formData = new FormData();\n    Array.from(selectedFiles).forEach(file => {\n      formData.append(\"files\", file);\n    });\n    try {\n      const response = await axios.post('http://localhost:4300/pc-info', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      console.log(\"Upload successful:\", response.data);\n      alert(\"Upload successful!\");\n      // Optionally, you can handle the response or update state here\n    } catch (error) {\n      console.error(\"Upload error:\", error);\n      alert(\"An error occurred while uploading. Please try again.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n_s(UploadPC, \"6iJwk1gH4hB0xa84T6RYQXjKu58=\");\n_c = UploadPC;\nexport default UploadPC;\nvar _c;\n$RefreshReg$(_c, \"UploadPC\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","UploadPC","_s","selectedFiles","setSelectedFiles","handleFileChange","e","target","files","handleUpload","length","alert","formData","FormData","Array","from","forEach","file","append","response","post","headers","console","log","data","error","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MONGODB-online/frontend/src/uploadpc.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction UploadPC() {\r\n    const [selectedFiles, setSelectedFiles] = useState([]);\r\n\r\n    const handleFileChange = (e) => {\r\n        setSelectedFiles(e.target.files);\r\n    };\r\n\r\n    const handleUpload = async () => {\r\n        if (selectedFiles.length === 0) {\r\n            alert(\"Please select one or more CSV files to upload.\");\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        Array.from(selectedFiles).forEach((file) => {\r\n            formData.append(\"files\", file);\r\n        });\r\n\r\n        try {\r\n            const response = await axios.post('http://localhost:4300/pc-info', formData, {\r\n                headers: {\r\n                    'Content-Type': 'multipart/form-data'\r\n                }\r\n            });\r\n            console.log(\"Upload successful:\", response.data);\r\n            alert(\"Upload successful!\");\r\n            // Optionally, you can handle the response or update state here\r\n        } catch (error) {\r\n            console.error(\"Upload error:\", error);\r\n            alert(\"An error occurred while uploading. Please try again.\");\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n\r\n\r\n            \r\n            {/* <h2>Upload PC Data</h2>\r\n            <input type=\"file\" multiple onChange={handleFileChange} className=\"form-control-file\" />\r\n            <button className=' mt-3' onClick={handleUpload}>Upload</button> */}\r\n     \r\n             \r\n     \r\n     \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default UploadPC;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAChB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMQ,gBAAgB,GAAIC,CAAC,IAAK;IAC5BF,gBAAgB,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EACpC,CAAC;EAED,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC7B,IAAIN,aAAa,CAACO,MAAM,KAAK,CAAC,EAAE;MAC5BC,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACJ;IAEA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;IAC/BC,KAAK,CAACC,IAAI,CAACZ,aAAa,CAAC,CAACa,OAAO,CAAEC,IAAI,IAAK;MACxCL,QAAQ,CAACM,MAAM,CAAC,OAAO,EAAED,IAAI,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI;MACA,MAAME,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAI,CAAC,+BAA+B,EAAER,QAAQ,EAAE;QACzES,OAAO,EAAE;UACL,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC;MACFC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEJ,QAAQ,CAACK,IAAI,CAAC;MAChDb,KAAK,CAAC,oBAAoB,CAAC;MAC3B;IACJ,CAAC,CAAC,OAAOc,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCd,KAAK,CAAC,sDAAsD,CAAC;IACjE;EACJ,CAAC;EAED,oBACIX,OAAA;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAWK,CAAC;AAEd;AAAC3B,EAAA,CA/CQD,QAAQ;AAAA6B,EAAA,GAAR7B,QAAQ;AAiDjB,eAAeA,QAAQ;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}