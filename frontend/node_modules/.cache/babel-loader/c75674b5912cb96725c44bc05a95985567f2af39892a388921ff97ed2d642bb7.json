{"ast":null,"code":"var _jsxFileName = \"D:\\\\MONGODB-online\\\\frontend\\\\src\\\\allschooldownload.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AllSchoolDownload() {\n  _s();\n  const [schoolData, setSchoolData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const baseUrl = process.env.REACT_APP_URL;\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const response = await fetch(\"${/get-pc\");\n        if (response.ok) {\n          const data = await response.json();\n          setSchoolData(data);\n        } else {\n          throw new Error(\"Failed to fetch data.\");\n        }\n      } catch (error) {\n        console.error(\"Error fetching data:\", error);\n        setError(error.message);\n      }\n      setLoading(false);\n    };\n    fetchData();\n  }, []);\n  const convertToCSV = useCallback(data => {\n    const headersMap = {\n      dayid: \"Day ID\",\n      starttime: \"Start Time\",\n      totaltime: \"Total Time\",\n      lasttime: \"Last Time\",\n      pcname: \"PC Name\",\n      eiin: \"EIIN\",\n      schoolname: \"School Name\",\n      labnum: \"Lab Number\",\n      pcnum: \"PC Number\"\n    };\n    if (!Array.isArray(data) || data.length === 0) {\n      console.error('Invalid or empty data provided to convertToCSV');\n      return '';\n    }\n    try {\n      const keys = Object.keys(data[0]).filter(key => key in headersMap);\n      const csvHeaders = keys.map(key => headersMap[key]);\n      const csv = data.map(row => {\n        return keys.map(key => `\"${String(row[key]).replace(/\"/g, '\"\"')}\"`).join(',');\n      }).join('\\n');\n      return csvHeaders.join(',') + '\\n' + csv;\n    } catch (error) {\n      console.error('Error converting data to CSV:', error);\n      return '';\n    }\n  }, []);\n  const downloadCSV = () => {\n    const csvData = convertToCSV(schoolData);\n    const blob = new Blob([csvData], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", \"all-school-info.csv\");\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-danger w-100\",\n      onClick: downloadCSV,\n      disabled: loading || error || schoolData.length === 0,\n      children: loading ? \"Loading...\" : \"Download All Schools Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-danger\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(AllSchoolDownload, \"aF4mIUhiUk3c90BD7n4jWl52abA=\");\n_c = AllSchoolDownload;\nexport default AllSchoolDownload;\nvar _c;\n$RefreshReg$(_c, \"AllSchoolDownload\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","AllSchoolDownload","_s","schoolData","setSchoolData","loading","setLoading","error","setError","baseUrl","process","env","REACT_APP_URL","fetchData","response","fetch","ok","data","json","Error","console","message","convertToCSV","headersMap","dayid","starttime","totaltime","lasttime","pcname","eiin","schoolname","labnum","pcnum","Array","isArray","length","keys","Object","filter","key","csvHeaders","map","csv","row","String","replace","join","downloadCSV","csvData","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","style","visibility","body","appendChild","click","removeChild","children","className","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/MONGODB-online/frontend/src/allschooldownload.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\n\r\nfunction AllSchoolDownload() {\r\n  const [schoolData, setSchoolData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const baseUrl = process.env.REACT_APP_URL;\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const response = await fetch(\"${/get-pc\");\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          setSchoolData(data);\r\n        } else {\r\n          throw new Error(\"Failed to fetch data.\");\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error fetching data:\", error);\r\n        setError(error.message);\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  const convertToCSV = useCallback((data) => {\r\n    const headersMap = {\r\n      dayid: \"Day ID\",\r\n      starttime: \"Start Time\",\r\n      totaltime: \"Total Time\",\r\n      lasttime: \"Last Time\",\r\n      pcname: \"PC Name\",\r\n      eiin: \"EIIN\",\r\n      schoolname: \"School Name\",\r\n      labnum: \"Lab Number\",\r\n      pcnum: \"PC Number\"\r\n    };\r\n\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      console.error('Invalid or empty data provided to convertToCSV');\r\n      return '';\r\n    }\r\n    \r\n    try {\r\n      const keys = Object.keys(data[0]).filter(key => key in headersMap);\r\n      const csvHeaders = keys.map(key => headersMap[key]);\r\n      const csv = data.map(row => {\r\n        return keys.map(key => `\"${String(row[key]).replace(/\"/g, '\"\"')}\"`).join(',');\r\n      }).join('\\n');\r\n      \r\n      return csvHeaders.join(',') + '\\n' + csv;\r\n    } catch (error) {\r\n      console.error('Error converting data to CSV:', error);\r\n      return '';\r\n    }\r\n  }, []);\r\n\r\n  const downloadCSV = () => {\r\n    const csvData = convertToCSV(schoolData);\r\n    const blob = new Blob([csvData], { type: \"text/csv;charset=utf-8;\" });\r\n    const url = URL.createObjectURL(blob);\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", \"all-school-info.csv\");\r\n    link.style.visibility = \"hidden\";\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button className=\"btn btn-danger w-100\" onClick={downloadCSV} disabled={loading || error || schoolData.length === 0}>\r\n        {loading ? \"Loading...\" : \"Download All Schools Info\"}\r\n      </button>\r\n      {error && <p className=\"text-danger\">Error: {error}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AllSchoolDownload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}